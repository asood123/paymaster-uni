// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/PaymasterUniGovernance.sol";

contract PaymasterUniGovernanceTest is Test {
    PaymasterUniGovernance public paymaster;

    function setUp() public {
        IEntryPoint entryPoint = IEntryPoint(address(0x0));
        paymaster = new PaymasterUniGovernance(entryPoint);
    }

    function testFail_NoCallData() view public {
        bytes memory testCallData = hex"";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_CallDataLessThan452() view public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_ExecuteSignatureOnly() view public {
        bytes memory testCallData = hex"b61d27f6";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_ExecuteSignature_AddressOnly() view public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_ExecuteSignature_Address_ValueOnly() view public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c30000000000000000000000000000000000000000000000000000000000000000";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_ExecuteSignature_Address_Value_Data1Only() view public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_ExecuteSignature_Address_Value_Data1_Data2Only() view public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044";
        paymaster._verifyCallData(testCallData);
    }

    function testFail_ExecuteSignature_Address_Value_Data1_Data2_castVote_Only() view public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000445678138800000000000000000000000000000000000000000000000000000000";
        paymaster._verifyCallData(testCallData);
    }

    function test_ProposalID_Less_Than_Fifty_one() public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044567813880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000320000000100000000000000000000000000000000000000000000000000000000";
        assertEq(paymaster._verifyCallData(testCallData), false);
    }

    function test_PassingCallDataYesVote() public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044567813880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000001";
        console.log(testCallData.length);
        assertEq(paymaster._verifyCallData(testCallData), true);
    }

    function test_PassingCallDataNoVote() public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044567813880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000000";
        console.log(testCallData.length);
        assertEq(paymaster._verifyCallData(testCallData), true);
    }

    function test_PassingCallDataAbstainVote() public {
        bytes memory testCallData = hex"b61d27f6000000000000000000000000408ed6354d4973f66138c91495f2f2fcbd8724c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044567813880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000002";
        console.log(testCallData.length);
        assertEq(paymaster._verifyCallData(testCallData), true);
    }
}
